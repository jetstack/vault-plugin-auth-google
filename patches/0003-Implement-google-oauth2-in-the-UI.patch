From bb6eb2cd9a8064d52b05ba682160e9356a746747 Mon Sep 17 00:00:00 2001
From: Jose Fuentes <jsfuentescastillo@gmail.com>
Date: Tue, 18 May 2021 16:40:06 +0200
Subject: [PATCH 3/3] Apply 0003

---
 ui/app/adapters/auth-callback.js              | 16 ++++++++++++
 ui/app/adapters/cluster.js                    | 10 +++++++-
 ui/app/components/auth-form.js                | 25 ++++++++++++++++++-
 ui/app/controllers/vault/cluster.js           |  3 ++-
 ui/app/controllers/vault/cluster/auth.js      | 25 ++++++++++++++++++-
 ui/app/helpers/supported-auth-backends.js     |  8 ++++++
 ui/app/mixins/cluster-route.js                |  6 ++++-
 ui/app/models/auth-config/google.js           |  2 ++
 ui/app/router.js                              |  1 +
 ui/app/routes/vault/cluster/auth-callback.js  | 16 ++++++++++++
 ui/app/routes/vault/cluster/auth.js           |  8 +++++-
 ui/app/templates/components/auth-form.hbs     |  4 +--
 .../templates/partials/auth-form/google.hbs   |  0
 ui/app/templates/vault/cluster/auth.hbs       |  1 +
 14 files changed, 117 insertions(+), 8 deletions(-)
 create mode 100644 ui/app/adapters/auth-callback.js
 create mode 100644 ui/app/models/auth-config/google.js
 create mode 100644 ui/app/routes/vault/cluster/auth-callback.js
 create mode 100644 ui/app/templates/partials/auth-form/google.hbs

diff --git a/ui/app/adapters/auth-callback.js b/ui/app/adapters/auth-callback.js
new file mode 100644
index 000000000..b4121ec3b
--- /dev/null
+++ b/ui/app/adapters/auth-callback.js
@@ -0,0 +1,16 @@
+import ApplicationAdapter from './application';
+
+export default ApplicationAdapter.extend({
+    callbackAction(backend, callback) {
+        let url = '/v1/auth/google/login';
+        let options = {
+            unauthenticated: true,
+            data: {
+                state: callback.state,
+                role: 'hello',
+                code: callback.code,
+            }
+        };
+        return this.ajax(url, 'POST', options);
+    },
+});
diff --git a/ui/app/adapters/cluster.js b/ui/app/adapters/cluster.js
index 032b77c75..c07e011a7 100644
--- a/ui/app/adapters/cluster.js
+++ b/ui/app/adapters/cluster.js
@@ -110,10 +110,17 @@ export default ApplicationAdapter.extend({
     const { role, jwt, token, password, username, path } = data;
     const url = this.urlForAuth(backend, username, path);
     const verb = backend === 'token' ? 'GET' : 'POST';
+
+
     let options = {
       unauthenticated: true,
     };
-    if (backend === 'token') {
+    if (backend === 'google') {
+      const urlPrefix = path ? path : backend;
+      return this.ajax(`/v1/auth/${urlPrefix}/web_code_url`, 'GET', options).then(response => {
+        window.location.replace(response.data.url);
+      });
+    } else if (backend === 'token') {
       options.headers = {
         'X-Vault-Token': token,
       };
@@ -146,6 +153,7 @@ export default ApplicationAdapter.extend({
       okta: `login/${encodeURIComponent(username)}`,
       radius: `login/${encodeURIComponent(username)}`,
       token: 'lookup-self',
+      google: 'login',
     };
     const urlSuffix = authURLs[authBackend];
     const urlPrefix = path && authBackend !== 'token' ? path : authBackend;
diff --git a/ui/app/components/auth-form.js b/ui/app/components/auth-form.js
index 6704d0c3a..e90ef3751 100644
--- a/ui/app/components/auth-form.js
+++ b/ui/app/components/auth-form.js
@@ -45,6 +45,7 @@ export default Component.extend(DEFAULTS, {
   redirectTo: null,
   namespace: null,
   wrappedToken: null,
+  callback: null,
   // internal
   oldNamespace: null,
 
@@ -57,6 +58,7 @@ export default Component.extend(DEFAULTS, {
       namespace: ns,
       selectedAuth: newMethod,
       oldSelectedAuth: oldMethod,
+      callback: cb,
     } = this;
 
     next(() => {
@@ -73,6 +75,9 @@ export default Component.extend(DEFAULTS, {
         this.resetDefaults();
       }
       this.set('oldSelectedAuth', newMethod);
+      if (cb && cb.state && cb.code) {
+        this.get('handleCallback').perform(cb);
+      }
     });
   },
 
@@ -158,6 +163,19 @@ export default Component.extend(DEFAULTS, {
     return shownMethods.length ? shownMethods : BACKENDS;
   }),
 
+  handleCallback: task(function*(callback){
+    let adapter = this.get('store').adapterFor('auth-callback');
+    try {
+      let response = yield adapter.callbackAction(null, callback);
+      this.set('selectedAuth', 'token');
+      this.set('token', response.auth.client_token);
+      this.send('doSubmit');
+    } catch (e) {
+      this.set('callback', null);
+      this.set('error', `callback handle failed: ${e.errors[0]}`);
+    }
+  }),
+
   unwrapToken: task(function*(token) {
     // will be using the Token Auth Method, so set it here
     this.set('selectedAuth', 'token');
@@ -188,7 +206,7 @@ export default Component.extend(DEFAULTS, {
     }
   }).withTestWaiter(),
 
-  showLoading: or('isLoading', 'authenticate.isRunning', 'fetchMethods.isRunning', 'unwrapToken.isRunning'),
+  showLoading: or('isLoading', 'authenticate.isRunning', 'fetchMethods.isRunning', 'unwrapToken.isRunning', 'handleCallback.isRunning'),
 
   handleError(e, prefixMessage = true) {
     this.set('loading', false);
@@ -265,6 +283,11 @@ export default Component.extend(DEFAULTS, {
       if (this.customPath || get(backend, 'id')) {
         data.path = this.customPath || get(backend, 'id');
       }
+      let callback = this.get('callback') || null;
+
+      if (callback) {
+        data = assign(data, callback)
+      }
       return this.authenticate.unlinked().perform(backend.type, data);
     },
     handleError(e) {
diff --git a/ui/app/controllers/vault/cluster.js b/ui/app/controllers/vault/cluster.js
index fd3d32463..4505e539b 100644
--- a/ui/app/controllers/vault/cluster.js
+++ b/ui/app/controllers/vault/cluster.js
@@ -52,7 +52,8 @@ export default Controller.extend({
       if (
         this.activeClusterName &&
         this.auth.currentToken &&
-        this.router.currentRouteName !== 'vault.cluster.auth'
+        this.router.currentRouteName !== 'vault.cluster.auth' &&
+        this.router.currentRouteName !== 'vault.cluster.auth-callback'
       ) {
         return true;
       }
diff --git a/ui/app/controllers/vault/cluster/auth.js b/ui/app/controllers/vault/cluster/auth.js
index d4478bae4..2bd1bdea1 100644
--- a/ui/app/controllers/vault/cluster/auth.js
+++ b/ui/app/controllers/vault/cluster/auth.js
@@ -1,5 +1,6 @@
 import { inject as service } from '@ember/service';
 import { alias } from '@ember/object/computed';
+import { computed } from '@ember/object';
 import Controller, { inject as controller } from '@ember/controller';
 import { task, timeout } from 'ember-concurrency';
 
@@ -9,11 +10,33 @@ export default Controller.extend({
   namespaceService: service('namespace'),
   featureFlagService: service('featureFlag'),
   namespaceQueryParam: alias('clusterController.namespaceQueryParam'),
-  queryParams: [{ authMethod: 'with' }],
+  queryParams: [
+    { authMethod: 'with' },
+    { callbackState: 'state'},
+    { callbackScope: 'scope'},
+    { callbackCode: 'code'},
+  ],
   wrappedToken: alias('vaultController.wrappedToken'),
   authMethod: '',
   redirectTo: alias('vaultController.redirectTo'),
   managedNamespaceRoot: alias('featureFlagService.managedNamespaceRoot'),
+  callback: false,
+  callbackState: null,
+  callbackScope: null,
+  callbackCode: null,
+  mountPath: null,
+
+  callbackInfo: computed(function() {
+    if (! this.get('callback')) {
+      return null;
+    }
+    return {
+      mountPath: this.get('mountPath'),
+      state: this.get('callbackState'),
+      scope: this.get('callbackScope'),
+      code: this.get('callbackCode'),
+    };
+  }),
 
   get managedNamespaceChild() {
     let fullParam = this.namespaceQueryParam;
diff --git a/ui/app/helpers/supported-auth-backends.js b/ui/app/helpers/supported-auth-backends.js
index 51365dc8e..12387194f 100644
--- a/ui/app/helpers/supported-auth-backends.js
+++ b/ui/app/helpers/supported-auth-backends.js
@@ -65,6 +65,14 @@ const SUPPORTED_AUTH_BACKENDS = [
     displayNamePath: ['metadata.org', 'metadata.username'],
     formAttributes: ['token'],
   },
+  {
+    type: 'google',
+    typeDisplay: 'Google',
+    description: 'Google Apps Login.',
+    tokenPath: 'client_token',
+    displayNamePath: 'metadata.username',
+    formAttributes: [],
+  },
 ];
 
 export function supportedAuthBackends() {
diff --git a/ui/app/mixins/cluster-route.js b/ui/app/mixins/cluster-route.js
index e4c6f938c..898d21a3e 100644
--- a/ui/app/mixins/cluster-route.js
+++ b/ui/app/mixins/cluster-route.js
@@ -5,6 +5,7 @@ import RSVP from 'rsvp';
 const INIT = 'vault.cluster.init';
 const UNSEAL = 'vault.cluster.unseal';
 const AUTH = 'vault.cluster.auth';
+const AUTH_CALLBACK = 'vault.cluster.auth-callback';
 const CLUSTER = 'vault.cluster';
 const CLUSTER_INDEX = 'vault.cluster.index';
 const OIDC_CALLBACK = 'vault.cluster.oidc-callback';
@@ -12,7 +13,7 @@ const DR_REPLICATION_SECONDARY = 'vault.cluster.replication-dr-promote';
 const DR_REPLICATION_SECONDARY_DETAILS = 'vault.cluster.replication-dr-promote.details';
 const EXCLUDED_REDIRECT_URLS = ['/vault/logout'];
 
-export { INIT, UNSEAL, AUTH, CLUSTER, CLUSTER_INDEX, DR_REPLICATION_SECONDARY };
+export { INIT, UNSEAL, AUTH, AUTH_CALLBACK, CLUSTER, CLUSTER_INDEX, DR_REPLICATION_SECONDARY };
 
 export default Mixin.create({
   auth: service(),
@@ -61,6 +62,9 @@ export default Mixin.create({
   targetRouteName(transition) {
     const cluster = this.clusterModel();
     const isAuthed = this.authToken();
+    if (!isAuthed && transition && transition.targetName == AUTH_CALLBACK) {
+      return null;
+    }
     if (get(cluster, 'needsInit')) {
       return INIT;
     }
diff --git a/ui/app/models/auth-config/google.js b/ui/app/models/auth-config/google.js
new file mode 100644
index 000000000..66657e064
--- /dev/null
+++ b/ui/app/models/auth-config/google.js
@@ -0,0 +1,2 @@
+import AuthConfig from '../auth-config';
+export default AuthConfig.extend({});
diff --git a/ui/app/router.js b/ui/app/router.js
index cfa018b0c..a451adb10 100644
--- a/ui/app/router.js
+++ b/ui/app/router.js
@@ -10,6 +10,7 @@ Router.map(function() {
   this.route('vault', { path: '/' }, function() {
     this.route('cluster', { path: '/:cluster_name' }, function() {
       this.route('oidc-callback', { path: '/auth/*auth_path/oidc/callback' });
+      this.route('auth-callback', { path: '/auth/:auth_method/callback/:mount_path'});
       this.route('auth');
       this.route('init');
       this.route('logout');
diff --git a/ui/app/routes/vault/cluster/auth-callback.js b/ui/app/routes/vault/cluster/auth-callback.js
new file mode 100644
index 000000000..21f3ad89a
--- /dev/null
+++ b/ui/app/routes/vault/cluster/auth-callback.js
@@ -0,0 +1,16 @@
+import ClusterRouteBase from './cluster-route-base';
+
+export default ClusterRouteBase.extend({
+    beforeModel() {
+        const params = this.paramsFor(this.routeName);
+        if (params.auth_method === 'google') {
+            this.transitionTo(
+                'vault.cluster.auth',
+                {
+                    queryParams: { authMethod: params.auth_method },
+                },
+            );
+        }
+        this.transitionTo('vault.cluster.auth');
+    },
+});
diff --git a/ui/app/routes/vault/cluster/auth.js b/ui/app/routes/vault/cluster/auth.js
index 1c2409797..3336703a7 100644
--- a/ui/app/routes/vault/cluster/auth.js
+++ b/ui/app/routes/vault/cluster/auth.js
@@ -6,6 +6,7 @@ export default ClusterRouteBase.extend({
   queryParams: {
     authMethod: {
       replace: true,
+      refreshModel: true
     },
   },
   flashMessages: service(),
@@ -16,7 +17,12 @@ export default ClusterRouteBase.extend({
       return this.version.fetchFeatures();
     });
   },
-  model() {
+  model(params) {
+    if (params.authMethod === 'google') {
+      let controller = this.controllerFor(this.routeName)
+      controller.set('callback', true);
+      controller.set('mountPath', params.mount_path);
+    }
     return this._super(...arguments);
   },
 
diff --git a/ui/app/templates/components/auth-form.hbs b/ui/app/templates/components/auth-form.hbs
index c8a9eecef..d45f7bcf2 100644
--- a/ui/app/templates/components/auth-form.hbs
+++ b/ui/app/templates/components/auth-form.hbs
@@ -10,7 +10,7 @@
         {{#each methodsToShow as |method|}}
           {{#with (or method.path method.type) as |methodKey|}}
               <li class="{{if (and selectedAuthIsPath (eq (or selectedAuthBackend.path selectedAuthBackend.type) methodKey)) 'is-active' ''}}" data-test-auth-method>
-                <LinkTo @route="vault.cluster.auth" @model={{cluster.name}} @query={{hash with=methodKey}} data-test-auth-method-link={{method.type}}>
+                <LinkTo @route="vault.cluster.auth" @model={{cluster.name}} @query={{hash with=methodKey state=null code=null scope=null}} data-test-auth-method-link={{method.type}}>
                   {{or method.id (capitalize method.type)}}
                 </LinkTo>
               </li>
@@ -18,7 +18,7 @@
         {{/each}}
         {{#if hasMethodsWithPath}}
           <li class="{{unless selectedAuthIsPath 'is-active' ''}}" data-test-auth-method>
-            <LinkTo @route="vault.cluster.auth" @model={{cluster.name}} @query={{hash with='token'}} data-test-auth-method-link="other">
+            <LinkTo @route="vault.cluster.auth" @model={{cluster.name}} @query={{hash with='token' state=null code=null scope=null}} data-test-auth-method-link="other">
               Other
             </LinkTo>
           </li>
diff --git a/ui/app/templates/partials/auth-form/google.hbs b/ui/app/templates/partials/auth-form/google.hbs
new file mode 100644
index 000000000..e69de29bb
diff --git a/ui/app/templates/vault/cluster/auth.hbs b/ui/app/templates/vault/cluster/auth.hbs
index 648658e99..5511cec2c 100644
--- a/ui/app/templates/vault/cluster/auth.hbs
+++ b/ui/app/templates/vault/cluster/auth.hbs
@@ -71,6 +71,7 @@
       @namespace={{namespaceQueryParam}}
       @redirectTo={{redirectTo}}
       @selectedAuth={{authMethod}}
+      @callback={{callbackInfo}}
       />
   </Page.content>
   <Page.footer>
-- 
2.25.1

